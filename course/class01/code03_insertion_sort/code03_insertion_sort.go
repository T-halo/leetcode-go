package course

// 插入排序
//
// 保证 0~i 内的元素有序，将第 i+1 位的元素依次与 i~0 的元素相比较
// 如果比其小（大），与其进行交换（插入有序序列中），保证 0~i+1 内有序
// 进行下一轮 0~i+2 的排序，保证 0~i+2 内有序
//
// 时间复杂度：最坏情况下 O(n^2)
func insertionSort(arr []int64) {
	//临界条件判断
	if arr == nil || len(arr) < 2 {
		return
	}

	//第一个元素天然有序，不需要排序
	//循环次数减一
	//0-0 本来就有序，跳过，从1开始，循环次数-1
	//0-1 进行排序
	//0-2 进行排序
	//0-n-1 进行排序
	for i := 1; i < len(arr); i++ {
		//j+1 与 j 相比较，如果小于 j，进行交换
		//继续与 j-1 进行比较
		//	- 如果大于 j-1，说明当前轮有序，退出当前轮循环
		//	- 如果一直比较到 j=0，说明当前轮结束，当前轮有序
		// 4 1 5 3 -> 1 4 5 3 -> 1 4 5 3 -> 1 4 3 5 -> 1 3 4 5 -> 1 3 4 5
		//            j = 0      j = 1      j = 2      j = 2      j = 2
		for j := i - 1; j >= 0; j-- {
			if arr[j] > arr[j+1] {
				swap(arr, j, j+1)
			} else {
				break
			}
		}
	}
}

func swap(arr []int64, i, j int) {
	arr[i] = arr[i] ^ arr[j]
	arr[j] = arr[i] ^ arr[j]
	arr[i] = arr[i] ^ arr[j]
}
